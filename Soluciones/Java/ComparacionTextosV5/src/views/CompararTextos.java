/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Font;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.DecimalFormat;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Usuario
 */
public class CompararTextos extends javax.swing.JFrame {

    /**
     * Creates new form CompararTextos
     */
    public File archivoSeleccionado1;
    public File archivoSeleccionado2;
    public Scanner in1;
    public Scanner in2;
    
    public CompararTextos() {
        initComponents();
        setResizable(false);
        setTitle("Comparar textos");
        
        addWindowListener(new WindowAdapter(){
            @Override
            public void windowClosing(WindowEvent e) {
                int opcion = javax.swing.JOptionPane.showConfirmDialog(null, "¿Está seguro de que desea salir?");
                if (opcion == javax.swing.JOptionPane.YES_OPTION) {
                    // Si el usuario confirma que quiere salir, se cierra la ventana
                    if (in1 != null) {
                        in1.close();
                    }
                    if (in2 != null) {
                        in2.close();
                    }
                    dispose();
                } else {
                    // Si el usuario elige no salir, se cancela el cierre de la ventana
                    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBackground = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSeleccionarArchivo2 = new javax.swing.JButton();
        btnSeleccionarArchivo1 = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaDatos = new javax.swing.JTextArea();
        btnAnalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelBackground.setBackground(new java.awt.Color(255, 255, 255));
        panelBackground.setPreferredSize(new java.awt.Dimension(1024, 640));
        panelBackground.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Poppins SemiBold", 0, 28)); // NOI18N
        jLabel1.setText("Comparar coincidencias de dos textos");
        panelBackground.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, -1, -1));

        jLabel2.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        jLabel2.setText("Archivo N°2:");
        panelBackground.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 180, -1, -1));

        jLabel3.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        jLabel3.setText("Archivo N°1:");
        panelBackground.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, -1, -1));

        btnSeleccionarArchivo2.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnSeleccionarArchivo2.setText("Seleccionar archivo");
        btnSeleccionarArchivo2.setFocusable(false);
        btnSeleccionarArchivo2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarArchivo2ActionPerformed(evt);
            }
        });
        panelBackground.add(btnSeleccionarArchivo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 180, 230, 30));

        btnSeleccionarArchivo1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        btnSeleccionarArchivo1.setText("Seleccionar archivo");
        btnSeleccionarArchivo1.setFocusable(false);
        btnSeleccionarArchivo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarArchivo1ActionPerformed(evt);
            }
        });
        panelBackground.add(btnSeleccionarArchivo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 130, 230, 30));

        btnLimpiar.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(144, 148, 151));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.setFocusable(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        panelBackground.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 180, 190, 30));

        TextAreaDatos.setEditable(false);
        TextAreaDatos.setBackground(new java.awt.Color(255, 255, 255));
        TextAreaDatos.setColumns(20);
        TextAreaDatos.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        TextAreaDatos.setRows(5);
        TextAreaDatos.setFocusable(false);
        jScrollPane2.setViewportView(TextAreaDatos);

        panelBackground.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, 730, 220));

        btnAnalizar.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        btnAnalizar.setForeground(new java.awt.Color(46, 204, 113));
        btnAnalizar.setText("Analizar");
        btnAnalizar.setFocusable(false);
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });
        panelBackground.add(btnAnalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 130, 190, 30));

        getContentPane().add(panelBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 960, 540));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarArchivo2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarArchivo2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileSeleccionarArchivo2 = new JFileChooser();
        int resultado = fileSeleccionarArchivo2.showOpenDialog(this);
        if(resultado == JFileChooser.APPROVE_OPTION){
            archivoSeleccionado2 = fileSeleccionarArchivo2.getSelectedFile();
            File archivo2 = fileSeleccionarArchivo2.getSelectedFile();
            JOptionPane.showMessageDialog(this, "Ud. selecciono el archivo "+archivo2.getName());
            btnSeleccionarArchivo2.setText(archivo2.getName());
        } else{
            JOptionPane.showMessageDialog(this, "Ud. no selecciono ningun archivo");
        }
    }//GEN-LAST:event_btnSeleccionarArchivo2ActionPerformed

    private void btnSeleccionarArchivo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarArchivo1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileSeleccionarArchivo1 = new JFileChooser();
        int resultado = fileSeleccionarArchivo1.showOpenDialog(this);
        if(resultado == JFileChooser.APPROVE_OPTION){
            archivoSeleccionado1 = fileSeleccionarArchivo1.getSelectedFile();
            File archivo1 = fileSeleccionarArchivo1.getSelectedFile(); 
            JOptionPane.showMessageDialog(this, "Ud. selecciono el archivo "+archivo1.getName());
            btnSeleccionarArchivo1.setText(archivo1.getName());
        } else{
            JOptionPane.showMessageDialog(this, "Ud. no selecciono ningun archivo");
        }
    }//GEN-LAST:event_btnSeleccionarArchivo1ActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        btnSeleccionarArchivo1.setText("Seleccionar archivo");
        btnSeleccionarArchivo2.setText("Seleccionar archivo");
        Encabezado();
        if (in1 != null) {
            in1.close();
        }
        if (in2 != null) {
            in2.close();
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        // Verificar si se ha seleccionado los archivos antes de continuar
        if (archivoSeleccionado1 != null && archivoSeleccionado2 != null) {
            try {
                // Crear Scanner para los archivos seleccionados
                in1 = new Scanner(archivoSeleccionado1);
                in2 = new Scanner(archivoSeleccionado2);

                // Obtener conjuntos de palabras únicas de los archivos
                Set<String> set1 = getPalabras(in1);
                Set<String> set2 = getPalabras(in2);

                // Obtener coincidencias entre los conjuntos
                Set<String> comun = getCoincidencias(set1, set2);

                // Realizar cualquier acción necesaria con los conjuntos y las coincidencias
                verDatos(set1, set2, comun);
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this, "Error al abrir el archivo: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione un archivo primero.");
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed
    
    void Encabezado(){
        TextAreaDatos.setFont(new Font("monospaced", Font.PLAIN, 14));
        TextAreaDatos.setText("");
        TextAreaDatos.append("");
        TextAreaDatos.append("--- Comparacion de textos y busqueda de coincidencias ---\n");
    }
    
    //post: lee palabras del Scanner, las convierte en minúsculas y devuelve un Set o conjunto de palabras únicas
    public Set<String> getPalabras(Scanner input){
        //Ignora todos los caracteres excepto los alfabéticos y apóstrofes haciendo uso de expresiones regulares.
        input.useDelimiter("[^a-zA-Z']+");
        //Lee todas las palabras y se almacena las palabras en un conjunto o Set, un conjunto no permite elementos duplicados.
        Set<String> palabras = new HashSet<>();
        while(input.hasNext()){
            String next = input.next().toLowerCase();
            palabras.add(next);
        }
        return palabras;
    }
    
    //pre: set1 y set2 no tienen palabras duplicadas, es decir, contienen palabras unicas.
    //post: construye y devuelve un Set que contiene las palabras en común entre set1 y set2
    public Set<String> getCoincidencias(Set<String> set1, Set<String> set2){
        Set<String> coincidencia = new HashSet<>();
        for (String elemento: set1){ //Se itera en cada uno de los elementos del conjunto set1
            if(set2.contains(elemento)){ //Se verifica si el elemento del conjunto set1 se encuentra en el conjunto set2 a través del metodo contains.
                coincidencia.add(elemento); //Se agrega el elemento en comun en el conjunto coincidencia.
            }
        }
        return coincidencia;
    }
    
    public void verDatos(Set<String> set1, Set<String> set2, Set<String> comun){
        TextAreaDatos.setText("");
        Encabezado();
        
        TextAreaDatos.append("Nombre del archivo 1: "+archivoSeleccionado1.getName()+"\n");
        TextAreaDatos.append("Nombre del archivo 2: "+archivoSeleccionado2.getName()+"\n");
   
        TextAreaDatos.append("Archivo #1 palabras: "+set1.size()+"\n");
        TextAreaDatos.append("Archivo #2 palabras: "+set2.size()+"\n");
        TextAreaDatos.append("-> Palabras en comun: "+comun.size()+"\n");
        
        double porcentaje1 = 100.0*comun.size()/set1.size();
        double porcentaje2 = 100.0*comun.size()/set2.size();
        
        //Usamos DecimalFormat para definir el patrón adecuado de cifras decimales de los porcentaje.
        DecimalFormat df = new DecimalFormat("#.###");
        
        //Formateamos los porcentajes usando DecimalFormat
        String porcentaje1Formateado = df.format(porcentaje1);
        String porcentaje2Formateado = df.format(porcentaje2);
        
        TextAreaDatos.append("-> Porcentaje (%) del archivo 1 en superposicion = "+porcentaje1+" %\n");
        TextAreaDatos.append("-> Porcentaje (%) del archivo 2 en superposicion = "+porcentaje2+" %\n");
        TextAreaDatos.append("-> Porcentaje (%) del archivo 1 aproximado: "+porcentaje1Formateado+" %\n");
        TextAreaDatos.append("-> Porcentaje (%) del archivo 2 aproximado: "+porcentaje2Formateado+" %\n");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompararTextos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompararTextos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompararTextos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompararTextos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        FlatLightLaf.setup();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompararTextos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextArea TextAreaDatos;
    public javax.swing.JButton btnAnalizar;
    public javax.swing.JButton btnLimpiar;
    public javax.swing.JButton btnSeleccionarArchivo1;
    public javax.swing.JButton btnSeleccionarArchivo2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelBackground;
    // End of variables declaration//GEN-END:variables
}
